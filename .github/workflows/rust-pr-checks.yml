name: Rust PR Checks and Release

on:
  pull_request:
    branches:
      - master
    types: [opened, synchronize, reopened]
  push:
    branches:
      - master

jobs:
  pr-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Check code format
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Run Clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --workspace --all-features --all-targets -- -D warnings

      - name: Build project
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --workspace --verbose

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace --verbose

  release:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: pr-checks
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Build and package release
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --workspace --release

      - name: Setup release name
        run: echo "RELEASE_NAME=my-app-$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_NAME }}
          release_name: Release ${{ env.RELEASE_NAME }}
          draft: false
          prerelease: false

      - name: Upload release artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/release
          asset_name: cedru
          asset_content_type: application/octet-stream
